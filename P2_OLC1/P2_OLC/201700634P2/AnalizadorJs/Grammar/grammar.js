/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[5,8],$V2=[1,27],$V3=[1,26],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,37],$Va=[7,8,10,28,29,30,31,32],$Vb=[1,46],$Vc=[1,47],$Vd=[1,48],$Ve=[1,49],$Vf=[1,52],$Vg=[7,8],$Vh=[18,33],$Vi=[1,64],$Vj=[1,63],$Vk=[1,61],$Vl=[1,62],$Vm=[1,66],$Vn=[1,67],$Vo=[1,68],$Vp=[1,69],$Vq=[1,70],$Vr=[1,71],$Vs=[1,90],$Vt=[1,91],$Vu=[1,77],$Vv=[1,78],$Vw=[1,79],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[18,33,37,38,46,78,79,80,81,82,83,84,86,87,88,89,90,91],$VI=[2,114],$VJ=[1,96],$VK=[1,99],$VL=[1,118],$VM=[1,121],$VN=[18,33,37,38,46,78,79,82,83,84,86,87,88,89,90,91],$VO=[18,33,37,38,46,82,83,84,86,87],$VP=[18,33,37,38,46,82,83,84,86,87,88,89,90,91],$VQ=[33,46],$VR=[1,137],$VS=[1,144],$VT=[1,145],$VU=[1,146],$VV=[1,147],$VW=[1,148],$VX=[1,149],$VY=[14,18],$VZ=[7,10,28,29,30,31,32,61,67,68,69,72,73],$V_=[7,10,28,29,30,31,32,61,65,66,67,68,69,72,73],$V$=[1,165],$V01=[1,181],$V11=[1,182],$V21=[7,10,28,29,30,31,32,61,65,66,67,68,69,70,72,73],$V31=[1,214];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LIST_INSTRUCTIONS":4,"EOF":5,"INSTRUCTIONS":6,"llave_der":7,"r_public":8,"r_class":9,"identificador":10,"BLOCK_DECLARATION_GLOBAL":11,"r_interface":12,"BLOCK_DEFINITION_FUNCTIONS":13,"llave_izq":14,"LIST_DECLARATION_GLOBAL":15,"LIST_DEFINITION_FUNCTIONS":16,"DECLARATION_GLOBAL":17,"punto_y_coma":18,"DECLARATION":19,"ASIGNATION":20,"OTHERS_ASIGNATIONS":21,"METHOD":22,"DEFINITION_FUNCTIONS":23,"TYPE_METHOD":24,"BLOCK_PARAMETROS":25,"TYPE_DATA":26,"LIST_DECLA_ASIGN":27,"r_int":28,"r_boolean":29,"r_double":30,"r_String":31,"r_char":32,"coma":33,"DECLA_ASIGN":34,"s_igual":35,"EXPRESION":36,"s_pos_incremento":37,"s_pos_decremento":38,"r_static":39,"r_void":40,"r_main":41,"parentesis_izq":42,"corchete_izq":43,"corchete_der":44,"r_args":45,"parentesis_der":46,"BLOCK_SENTENCIAS":47,"LIST_PARAMETROS":48,"PARAMETROS":49,"LIST_SENTENCIAS":50,"SENTENCIAS":51,"BLOCK_PARAMETROS_PRIMITIVOS":52,"FOR":53,"WHILE":54,"DO_WHILE":55,"IF":56,"RETURN":57,"PRINT":58,"LIST_PARAMETROS_PRIMITIVOS":59,"PRIMITIVOS":60,"r_for":61,"BLOCK_CYCLE":62,"LIST_BLOQUE_CICLO":63,"SENTENCIAS_CICLO":64,"r_break":65,"r_continue":66,"r_while":67,"r_do":68,"r_if":69,"r_else":70,"IF_N":71,"r_return":72,"r_System":73,"punto":74,"r_out":75,"r_println":76,"r_print":77,"s_mas":78,"s_menos":79,"s_por":80,"s_division":81,"s_AND":82,"s_OR":83,"s_XOR":84,"s_NOT":85,"s_doble_igual":86,"s_diferente_de":87,"s_menor_que":88,"s_mayor_que":89,"s_menor_igual_que":90,"s_mayor_igual_que":91,"numero_entero":92,"numero_decimal":93,"cadena_char":94,"cadena_string":95,"r_true":96,"r_false":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"llave_der",8:"r_public",9:"r_class",10:"identificador",12:"r_interface",14:"llave_izq",18:"punto_y_coma",28:"r_int",29:"r_boolean",30:"r_double",31:"r_String",32:"r_char",33:"coma",35:"s_igual",37:"s_pos_incremento",38:"s_pos_decremento",39:"r_static",40:"r_void",41:"r_main",42:"parentesis_izq",43:"corchete_izq",44:"corchete_der",45:"r_args",46:"parentesis_der",61:"r_for",65:"r_break",66:"r_continue",67:"r_while",68:"r_do",69:"r_if",70:"r_else",72:"r_return",73:"r_System",74:"punto",75:"r_out",76:"r_println",77:"r_print",78:"s_mas",79:"s_menos",80:"s_por",81:"s_division",82:"s_AND",83:"s_OR",84:"s_XOR",85:"s_NOT",86:"s_doble_igual",87:"s_diferente_de",88:"s_menor_que",89:"s_mayor_que",90:"s_menor_igual_que",91:"s_mayor_igual_que",92:"numero_entero",93:"numero_decimal",94:"cadena_char",95:"cadena_string",96:"r_true",97:"r_false"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[6,4],[6,4],[11,3],[11,2],[13,3],[13,2],[15,2],[15,1],[15,1],[15,2],[17,2],[17,2],[17,2],[17,1],[16,2],[16,1],[16,1],[16,2],[23,5],[19,2],[26,1],[26,1],[26,1],[26,1],[26,1],[27,3],[27,1],[34,1],[34,3],[20,3],[21,2],[21,2],[22,11],[22,5],[24,1],[24,1],[25,3],[25,2],[48,3],[48,1],[49,2],[47,3],[47,2],[50,2],[50,1],[50,1],[50,2],[51,2],[51,2],[51,2],[51,3],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[52,3],[52,2],[59,3],[59,1],[53,9],[62,3],[62,2],[63,2],[63,1],[63,1],[63,2],[64,1],[64,2],[64,2],[54,5],[55,7],[56,5],[56,7],[56,7],[71,5],[71,7],[71,7],[57,3],[57,2],[58,9],[58,9],[36,3],[36,3],[36,3],[36,3],[36,2],[36,3],[36,3],[36,3],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,2],[36,2],[36,3],[36,2],[36,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// Ya analizada la entrada, se retorna el objeto ast de la clase Abstrac_Sintactic_Tree
        let ast = new Abstrac_Sintactic_Tree($$[$0-1]);
		return ast;
	
break;
case 2: case 11: case 19: case 48: case 69:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 12: case 20: case 31: case 44: case 49: case 65: case 70:
this.$ = [$$[$0]]; 
break;
case 4:
 Listas.addTokenError(yytext, TipoError.SINTACTICO, "Error en instruccion class/interface, se recupero en->", this._$.first_line, this._$.first_column); this.$ = [new Class_Interface("", "", "", [], this._$.first_column)]; 
break;
case 5: case 6:
this.$ = new Class_Interface($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], this._$.first_column); 
break;
case 7: case 9: case 15: case 16: case 17: case 41: case 46: case 52: case 53: case 54: case 62: case 67:
this.$ = $$[$0-1]; 
break;
case 8: case 10: case 42: case 47: case 63: case 68:
this.$ = []; 
break;
case 13: case 50:
 Listas.addTokenError(yytext, TipoError.SINTACTICO, "Error cerca de este caracter", this._$.first_line, this._$.first_column); this.$ = [new Declaration("", [], this._$.first_column)]; 
break;
case 14:
 Listas.addTokenError(yytext, TipoError.SINTACTICO, "Error en sentencia global, se recupero en->", this._$.first_line, this._$.first_column); this.$ = [new Declaration("", [], this._$.first_column)];
break;
case 18: case 25: case 26: case 27: case 28: case 29: case 39: case 40: case 56: case 57: case 58: case 59: case 60: case 61: case 73:
this.$ = $$[$0]; 
break;
case 21:
 Listas.addTokenError(yytext, TipoError.SINTACTICO, "Error cerca de este caracter", this._$.first_line, this._$.first_column); this.$ = [new Method("", "", "", [], [], this._$.first_column)]; 
break;
case 22:
 Listas.addTokenError(yytext, TipoError.SINTACTICO, "Error en definir funcion, se recupero en->", this._$.first_line, this._$.first_column); this.$ = [new Method("", "", "", [], [], this._$.first_column)]; 
break;
case 23:
this.$ = new Method($$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], null, this._$.first_column); 
break;
case 24:
this.$ = new Declaration($$[$0-1], $$[$0], this._$.first_column); 
break;
case 30: case 43: case 64:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 32:
this.$ = new Identifier($$[$0], null, Type_Operation.IDENTIFICADOR, false, 1); 
break;
case 33:
this.$ = new Asignation($$[$0-2], $$[$0], false, 1); 
break;
case 34:
this.$ = new Asignation($$[$0-2], $$[$0], true, this._$.first_column); 
break;
case 35:
this.$ = new Identifier($$[$0-1], null, Type_Operation.POS_INCREMENTO, false, this._$.first_column); 
break;
case 36:
this.$ = new Identifier($$[$0-1], null, Type_Operation.POS_DECREMENTO, false, this._$.first_column); 
break;
case 37:
this.$ = new Method($$[$0-10], $$[$0-8], $$[$0-7], null, $$[$0], this._$.first_column); 
break;
case 38:
this.$ = new Method($$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0], this._$.first_column); 
break;
case 45:
this.$ = new Parameter($$[$0-1], $$[$0]); 
break;
case 51:
 Listas.addTokenError(yytext, TipoError.SINTACTICO, "Error en sentencia local, se recupero en->", this._$.first_line, this._$.first_column); this.$ = [new Declaration("", [], this._$.first_column)]; 
break;
case 55:
this.$ = new Identifier($$[$0-2], $$[$0-1], Type_Operation.LLAMADA_METODO, true, this._$.first_column);
break;
case 66:
this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], this._$.first_column); 
break;
case 71:
 Listas.addTokenError(yytext, TipoError.SINTACTICO, "Error cerca de este caracter", this._$.first_line, this._$.first_column); this.$ = [new Return_Continue_Break("", [], false, this._$.first_column)]; 
break;
case 72:
 Listas.addTokenError(yytext, TipoError.SINTACTICO, "Error en sentencia local ciclo, se recupero en->", this._$.first_line, this._$.first_column); this.$ = [new Return_Continue_Break("", [], false, this._$.first_column)];
break;
case 74: case 75: case 85:
this.$ = new Return_Continue_Break($$[$0-1], null, false, this._$.first_column); 
break;
case 76:
this.$ = new While($$[$0-2], $$[$0], this._$.first_column); 
break;
case 77:
this.$ = new Do_While($$[$0-5], $$[$0-2], this._$.first_column); 
break;
case 78:
this.$ = new If($$[$0-2], $$[$0], false, null, false, null, true, this._$.first_column); 
break;
case 79:
this.$ = new If($$[$0-4], $$[$0-2], true, $$[$0], false, null, true, this._$.first_column); 
break;
case 80:
this.$ = new If($$[$0-4], $$[$0-2], false, null, true, $$[$0], true, this._$.first_column); 
break;
case 81:
this.$ = new If($$[$0-2], $$[$0], false, null, false, null, false, this._$.first_column); 
break;
case 82:
this.$ = new If($$[$0-4], $$[$0-2], true, $$[$0], false, null, false, this._$.first_column); 
break;
case 83:
this.$ = new If($$[$0-4], $$[$0-2], false, null, true, $$[$0], false, this._$.first_column); 
break;
case 84:
this.$ = new Return_Continue_Break($$[$0-2], $$[$0-1], true, this._$.first_column); 
break;
case 86: case 87:
this.$ = new Print($$[$0-4], $$[$0-2], this._$.first_column); 
break;
case 88:
this.$ = new Aritmetica($$[$0-2], Type_Operation.SUMA, $$[$0]); 
break;
case 89:
this.$ = new Aritmetica($$[$0-2], Type_Operation.RESTA, $$[$0]); 
break;
case 90:
this.$ = new Aritmetica($$[$0-2], Type_Operation.MULTIPLICACION, $$[$0]); 
break;
case 91:
this.$ = new Aritmetica($$[$0-2], Type_Operation.DIVISION, $$[$0]); 
break;
case 92:
this.$ = new Aritmetica($$[$0], Type_Operation.MENOS_UNARIO, null); 
break;
case 93:
this.$ = new Logica($$[$0-2], Type_Operation.AND, $$[$0]); 
break;
case 94:
this.$ = new Logica($$[$0-2], Type_Operation.OR, $$[$0]); 
break;
case 95:
this.$ = new Logica($$[$0-2], Type_Operation.XOR, $$[$0]); 
break;
case 96:
this.$ = new Logica($$[$0], Type_Operation.NOT_UNARIO, null); 
break;
case 97:
this.$ = new Relacional($$[$0-2], Type_Operation.DOBLE_IGUAL, $$[$0]); 
break;
case 98:
this.$ = new Relacional($$[$0-2], Type_Operation.DIFERENTE_DE, $$[$0]); 
break;
case 99:
this.$ = new Relacional($$[$0-2], Type_Operation.MENOR_QUE, $$[$0]); 
break;
case 100:
this.$ = new Relacional($$[$0-2], Type_Operation.MAYOR_QUE, $$[$0]); 
break;
case 101:
this.$ = new Relacional($$[$0-2], Type_Operation.MENOR_IGUAL_QUE, $$[$0]); 
break;
case 102:
this.$ = new Relacional($$[$0-2], Type_Operation.MAYOR_IGUAL_QUE, $$[$0]); 
break;
case 103:
this.$ = new Aritmetica($$[$0-1], Type_Operation.POS_INCREMENTO, null); 
break;
case 104:
this.$ = new Aritmetica($$[$0-1], Type_Operation.POS_DECREMENTO, null); 
break;
case 105:
this.$ = new Aritmetica($$[$0-1], Type_Operation.PARENTESIS, null); 
break;
case 106:
this.$ = new Identifier($$[$0-1], $$[$0], Type_Operation.LLAMADA_METODO,false, this._$.first_column); 
break;
case 107:
this.$ = $$[$0]
break;
case 108: case 109: case 110: case 111: case 112: case 113:
this.$ = new Primitivo($$[$0]); 
break;
case 114:
this.$ = new Identifier($$[$0], null, Type_Operation.IDENTIFICADOR, false, this._$.first_column); 
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,8:$V0},{1:[3]},{5:[1,6],6:7,8:$V0},o($V1,[2,3]),{7:[1,8]},{9:[1,9],12:[1,10]},{1:[2,1]},o($V1,[2,2]),o($V1,[2,4]),{10:[1,11]},{10:[1,12]},{11:13,14:[1,14]},{13:15,14:[1,16]},o($V1,[2,5]),{2:[1,20],7:[1,18],8:$V2,10:$V3,15:17,17:19,19:21,20:22,21:23,22:24,26:25,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8},o($V1,[2,6]),{2:[1,36],7:[1,34],8:$V9,16:33,23:35},{7:[1,38],8:$V2,10:$V3,17:39,19:21,20:22,21:23,22:24,26:25,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8},o($V1,[2,8]),o($Va,[2,12]),o($Va,[2,13],{18:[1,40]}),{18:[1,41]},{18:[1,42]},{18:[1,43]},o($Va,[2,18]),{10:$Vb,27:44,34:45},{35:$Vc,37:$Vd,38:$Ve},{24:51,26:53,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,39:[1,50],40:$Vf},{10:[2,25]},{10:[2,26]},{10:[2,27]},{10:[2,28]},{10:[2,29]},{7:[1,54],8:$V9,23:55},o($V1,[2,10]),o($Vg,[2,20]),o($Vg,[2,21],{18:[1,56]}),{24:57,26:53,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,40:$Vf},o($V1,[2,7]),o($Va,[2,11]),o($Va,[2,14]),o($Va,[2,15]),o($Va,[2,16]),o($Va,[2,17]),{18:[2,24],33:[1,58]},o($Vh,[2,31]),o($Vh,[2,32],{35:[1,59]}),{10:$Vi,36:60,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{18:[2,35]},{18:[2,36]},{40:[1,72]},{10:[1,73]},{10:[2,39]},{10:[2,40]},o($V1,[2,9]),o($Vg,[2,19]),o($Vg,[2,22]),{10:[1,74]},{10:$Vb,34:75},{10:$Vi,36:76,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{18:[2,34],37:$Vs,38:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,84:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG},{10:$Vi,36:92,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:93,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:94,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},o($VH,$VI,{52:95,42:$VJ}),o($VH,[2,107]),o($VH,[2,108]),o($VH,[2,109]),o($VH,[2,110]),o($VH,[2,111]),o($VH,[2,112]),o($VH,[2,113]),{41:[1,97]},{25:98,42:$VK},{25:100,42:$VK},o($Vh,[2,30]),o($Vh,[2,33],{37:$Vs,38:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,84:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG}),{10:$Vi,36:101,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:102,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:103,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:104,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:105,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:106,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:107,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:108,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:109,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:110,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:111,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:112,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:113,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},o($VH,[2,103]),o($VH,[2,104]),o($VH,[2,92]),o($VH,[2,96]),{37:$Vs,38:$Vt,46:[1,114],78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,84:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG},o($VH,[2,106]),{10:$VL,46:[1,116],59:115,60:117,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{42:[1,119]},{14:$VM,47:120},{26:125,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,46:[1,123],48:122,49:124},{18:[1,126]},o($VN,[2,88],{80:$Vw,81:$Vx}),o($VN,[2,89],{80:$Vw,81:$Vx}),o($VH,[2,90]),o($VH,[2,91]),o([18,33,37,38,46,82,83],[2,93],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,84:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG}),o([18,33,37,38,46,83],[2,94],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,84:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG}),o([18,33,37,38,46,82,83,84],[2,95],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG}),o($VO,[2,97],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,88:$VD,89:$VE,90:$VF,91:$VG}),o($VO,[2,98],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,88:$VD,89:$VE,90:$VF,91:$VG}),o($VP,[2,99],{78:$Vu,79:$Vv,80:$Vw,81:$Vx}),o($VP,[2,100],{78:$Vu,79:$Vv,80:$Vw,81:$Vx}),o($VP,[2,101],{78:$Vu,79:$Vv,80:$Vw,81:$Vx}),o($VP,[2,102],{78:$Vu,79:$Vv,80:$Vw,81:$Vx}),o($VH,[2,105]),{33:[1,128],46:[1,127]},o($VH,[2,63]),o($VQ,[2,65]),o($VQ,$VI),{31:[1,129]},o($Va,[2,38]),{2:[1,133],7:[1,131],10:$VR,19:134,20:135,21:136,26:25,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,50:130,51:132,53:138,54:139,55:140,56:141,57:142,58:143,61:$VS,67:$VT,68:$VU,69:$VV,72:$VW,73:$VX},{33:[1,151],46:[1,150]},o($VY,[2,42]),o($VQ,[2,44]),{10:[1,152]},o($Vg,[2,23]),o($VH,[2,62]),{10:$VL,60:153,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{43:[1,154]},{7:[1,155],10:$VR,19:134,20:135,21:136,26:25,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,51:156,53:138,54:139,55:140,56:141,57:142,58:143,61:$VS,67:$VT,68:$VU,69:$VV,72:$VW,73:$VX},o($Va,[2,47]),o($VZ,[2,49]),o($VZ,[2,50],{18:[1,157]}),{18:[1,158]},{18:[1,159]},{18:[1,160]},{35:$Vc,37:$Vd,38:$Ve,42:$VJ,52:161},o($V_,[2,56]),o($V_,[2,57]),o($V_,[2,58]),o($V_,[2,59]),o($V_,[2,60]),o($V_,[2,61]),{42:[1,162]},{42:[1,163]},{14:$V$,62:164},{42:[1,166]},{10:$Vi,18:[1,168],36:167,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{74:[1,169]},o($VY,[2,41]),{26:125,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,49:170},o($VQ,[2,45]),o($VQ,[2,64]),{44:[1,171]},o($Va,[2,46]),o($VZ,[2,48]),o($VZ,[2,51]),o($V_,[2,52]),o($V_,[2,53]),o($V_,[2,54]),{18:[1,172]},{19:173,26:25,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8},{10:$Vi,36:174,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{67:[1,175]},{2:[1,179],7:[1,177],10:$VR,19:134,20:135,21:136,26:25,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,51:180,53:138,54:139,55:140,56:141,57:142,58:143,61:$VS,63:176,64:178,65:$V01,66:$V11,67:$VT,68:$VU,69:$VV,72:$VW,73:$VX},{10:$Vi,36:183,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{18:[1,184],37:$Vs,38:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,84:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG},o($V_,[2,85]),{75:[1,185]},o($VQ,[2,43]),{45:[1,186]},o($V_,[2,55]),{18:[1,187]},{37:$Vs,38:$Vt,46:[1,188],78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,84:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG},{42:[1,189]},{7:[1,190],10:$VR,19:134,20:135,21:136,26:25,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,51:180,53:138,54:139,55:140,56:141,57:142,58:143,61:$VS,64:191,65:$V01,66:$V11,67:$VT,68:$VU,69:$VV,72:$VW,73:$VX},o($V21,[2,68]),o($V_,[2,70]),o($V_,[2,71],{18:[1,192]}),o($V_,[2,73]),{18:[1,193]},{18:[1,194]},{37:$Vs,38:$Vt,46:[1,195],78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,84:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG},o($V_,[2,84]),{74:[1,196]},{46:[1,197]},{10:$Vi,36:198,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{14:$V$,62:199},{10:$Vi,36:200,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},o($V21,[2,67]),o($V_,[2,69]),o($V_,[2,72]),o($V_,[2,74]),o($V_,[2,75]),{14:$V$,62:201},{76:[1,202],77:[1,203]},{14:$VM,47:204},{18:[1,205],37:$Vs,38:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,84:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG},o($V_,[2,76]),{37:$Vs,38:$Vt,46:[1,206],78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,84:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG},o($V_,[2,78],{70:[1,207]}),{42:[1,208]},{42:[1,209]},o($Va,[2,37]),{10:$Vi,36:210,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{18:[1,211]},{14:$V$,62:212,69:$V31,71:213},{10:$Vi,36:215,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vi,36:216,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{37:$Vs,38:$Vt,46:[1,217],78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,84:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG},o($V_,[2,77]),o($V_,[2,79]),o($V_,[2,80]),{42:[1,218]},{37:$Vs,38:$Vt,46:[1,219],78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,84:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG},{37:$Vs,38:$Vt,46:[1,220],78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,84:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG},{14:$V$,62:221},{10:$Vi,36:222,42:$Vj,60:65,79:$Vk,85:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{18:[1,223]},{18:[1,224]},o($V_,[2,66]),{37:$Vs,38:$Vt,46:[1,225],78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:$Vy,83:$Vz,84:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG},o($V_,[2,86]),o($V_,[2,87]),{14:$V$,62:226},o($V_,[2,81],{70:[1,227]}),{14:$V$,62:228,69:$V31,71:229},o($V_,[2,82]),o($V_,[2,83])],
defaultActions: {6:[2,1],28:[2,25],29:[2,26],30:[2,27],31:[2,28],32:[2,29],48:[2,35],49:[2,36],52:[2,39],53:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Abstrac_Sintactic_Tree } = require('../dist/AST/Abstrac_Sintactic_Tree');
    const { Class_Interface } = require('../dist/AST/Instructions/Class_Interface');
    const { Declaration } = require('../dist/AST/Declaration-Definition-Global/Declaration');
    const { Identifier } = require('../dist/AST/Declaration-Definition-Global/Identifier');
    const { Asignation } = require('../dist/AST/Declaration-Definition-Global/Asignation');
    const { Method } = require('../dist/AST/Declaration-Definition-Global/Method');
    const { Parameter } = require('../dist/AST/Declaration-Definition-Global/Parameter');
    const { Type_Operation } = require('../dist/AST/Types');
    const { Aritmetica } = require('../dist/AST/Expressions/Aritmetica');
    const { Primitivo } = require('../dist/AST/Expressions/Primitivo');
    const { Relacional } = require('../dist/AST/Expressions/Relacional');
    const { Logica } = require('../dist/AST/Expressions/Logica');
    const { Return_Continue_Break } = require('../dist/AST/Sentences/Return_Continue_Break');
    const { For } = require('../dist/AST/Sentences/For');
    const { While } = require('../dist/AST/Sentences/While');
    const { Do_While } = require('../dist/AST/Sentences/Do_While');
    const { If } = require('../dist/AST/Sentences/If');
    const { Print } = require('../dist/AST/Sentences/Print');
    const { Tipo } = require('../dist/TOKENS/Token');
    const { TipoError } = require('../dist/TOKENS/Token_Error');
    const { Listas } = require('../dist/TOKENS/Listas');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:/* comentario simple línea*/ {Listas.addToken(Tipo.COMENTARIO_LINEA, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column);}
break;
case 2:Listas.addToken(Tipo.COMENTARIO_BLOQUE, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column);
break;
case 3:Listas.addToken(Tipo.RESERVADA_PUBLIC, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 8;
break;
case 4:Listas.addToken(Tipo.RESERVADA_CLASS, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 9;
break;
case 5:Listas.addToken(Tipo.RESERVADA_INTERFACE, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 12;
break;
case 6:Listas.addToken(Tipo.RESERVADA_VOID, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 40;
break;
case 7:Listas.addToken(Tipo.RESERVADA_FOR, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 61;
break;
case 8:Listas.addToken(Tipo.RESERVADA_WHILE, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 67;
break;
case 9:Listas.addToken(Tipo.RESERVADA_DO, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 68;
break;
case 10:Listas.addToken(Tipo.RESERVADA_IF, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 69;
break;
case 11:Listas.addToken(Tipo.RESERVADA_ELSE, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 70;
break;
case 12:Listas.addToken(Tipo.RESERVADA_BREAK, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 65;
break;
case 13:Listas.addToken(Tipo.RESERVADA_CONTINUE, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 66;
break;
case 14:Listas.addToken(Tipo.RESERVADA_RETURN, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 72;
break;
case 15:Listas.addToken(Tipo.RESERVADA_INT, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 28;
break;
case 16:Listas.addToken(Tipo.RESERVADA_DOUBLE, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 30;
break;
case 17:Listas.addToken(Tipo.RESERVADA_STRING, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 31;
break;
case 18:Listas.addToken(Tipo.RESERVADA_CHAR, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 32;
break;
case 19:Listas.addToken(Tipo.RESERVADA_BOOLEAN, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 29;
break;
case 20:Listas.addToken(Tipo.RESERVADA_TRUE, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 96;
break;
case 21:Listas.addToken(Tipo.RESERVADA_FALSE, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 97;
break;
case 22:Listas.addToken(Tipo.RESERVADA_STATIC, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 39;
break;
case 23:Listas.addToken(Tipo.RESERVADA_MAIN, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 41;
break;
case 24:Listas.addToken(Tipo.RESERVADA_ARGS, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 45;
break;
case 25:Listas.addToken(Tipo.RESERVADA_SYSTEM, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 73;
break;
case 26:Listas.addToken(Tipo.RESERVADA_OUT, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 75;
break;
case 27:Listas.addToken(Tipo.RESERVADA_PRINTLN, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 76;
break;
case 28:Listas.addToken(Tipo.RESERVADA_PRINT, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 77;
break;
case 29:Listas.addToken(Tipo.LLAVE_IZQ, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 14;
break;
case 30:Listas.addToken(Tipo.LLAVE_DER, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 7;
break;
case 31:Listas.addToken(Tipo.COMA, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 33;
break;
case 32:Listas.addToken(Tipo.PUNTO, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 74;
break;
case 33:Listas.addToken(Tipo.PUNTO_Y_COMA, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 18;
break;
case 34:Listas.addToken(Tipo.CORCHETE_IZQ, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 43;
break;
case 35:Listas.addToken(Tipo.CORCHETE_DER, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 44;
break;
case 36:Listas.addToken(Tipo.PARENTESIS_IZQ, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 42;
break;
case 37:Listas.addToken(Tipo.PARENTESIS_DER, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 46;
break;
case 38:Listas.addToken(Tipo.SIGNO_POS_INCREMENTO, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 37;
break;
case 39:Listas.addToken(Tipo.SIGNO_POS_DECREMENTO, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 38;
break;
case 40:Listas.addToken(Tipo.SIGNO_MAS, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 78;
break;
case 41:Listas.addToken(Tipo.SIGNO_MENOS, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 79;
break;
case 42:Listas.addToken(Tipo.SIGNO_POR, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 80;
break;
case 43:Listas.addToken(Tipo.SIGNO_DIVISION, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 81;
break;
case 44:Listas.addToken(Tipo.SIGNO_MAYOR_IGUAL_QUE, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 91;
break;
case 45:Listas.addToken(Tipo.SIGNO_MENOR_IGUAL_QUE, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 90;
break;
case 46:Listas.addToken(Tipo.SIGNO_MENOR_QUE, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 88;
break;
case 47:Listas.addToken(Tipo.SIGNO_MAYOR_QUE, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 89;
break;
case 48:Listas.addToken(Tipo.SIGNO_DIFERENTE_DE, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 87;
break;
case 49:Listas.addToken(Tipo.SIGNO_DOBLE_IGUAL, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 86;
break;
case 50:Listas.addToken(Tipo.SIGNO_IGUAL, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 35;
break;
case 51:Listas.addToken(Tipo.SIGNO_AND, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 82;
break;
case 52:Listas.addToken(Tipo.SIGNO_OR, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 83;
break;
case 53:Listas.addToken(Tipo.SIGNO_NOT, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 85;
break;
case 54:Listas.addToken(Tipo.SIGNO_XOR, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 84;
break;
case 55:Listas.addToken(Tipo.CADENA_STRING, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 95;
break;
case 56:Listas.addToken(Tipo.CADENA_CHAR, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 94;
break;
case 57:Listas.addToken(Tipo.NUMERO_DECIMAL, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 93;
break;
case 58:Listas.addToken(Tipo.NUMERO_ENTERO, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 92;
break;
case 59:Listas.addToken(Tipo.IDENTIFICADOR, yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); return 10;
break;
case 60:return 5;
break;
case 61: Listas.addTokenError(yy_.yytext, TipoError.LEXICO, "El caracter no pertenece al lenguaje", yy_.yylloc.first_line, yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:public\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:args\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\^)/,/^(?:"[^\"]*")/,/^(?:'[^']')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}